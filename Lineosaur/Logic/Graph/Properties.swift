//
//  Properties.swift
//  Lineosaur
//
//  Created by Dylan Conklin on 6/14/24.
//

import Foundation

extension Graph {
    var copy: Graph {
        Graph(graphEdges: edges, graphVertices: vertices)
    }

    /// Calculates the total cost of the graph
    /// The cost is the sum of the weight (length) of all the edges in the graph
    var cost: Double {
        edges.reduce(0.0) { $0 + $1.weight }
    }

    var leaves: Set<Vertex> {
        Set<Vertex>(vertices.filter { vertex in
            !edges(connectedTo: vertex).contains { $0.from == vertex }
        })
    }

    var loops: Set<Edge> {
        Set(edges.filter { $0.from == $0.toward })
    }

    /// Generate the Minimum Spanning Tree (MST)
    /// - Returns: The MST Graph generated by the edges in the graph
    var mst: Graph {
        guard isTree else {
            return Graph()
        }

        let graph: Graph = copy
        var verticesLeft: Set<Vertex> = .init(graph.vertices) // vertices that don't have an edge
        let MST: Graph = .init()

        while let edge = graph.edges.sorted(by: { $0.weight < $1.weight }).first(where: { edge in
            let groupA: Set<Vertex> = .init(edge.vertices).intersection(verticesLeft)
            let groupB: Set<Vertex> = .init(edge.vertices).intersection(MST.vertices)
            return !groupA.isEmpty && !groupB.isEmpty
        }) ?? (MST.isEmpty ? graph.edges.min(by: { $0.weight < $1.weight }) : nil) {
            MST.insert(edge)
            graph.remove(edge)
            verticesLeft.subtract(edge.vertices)
        }

        return MST
    }
}
